import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id "java"
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
}

jar {
    archiveBaseName = "pine"
    from sourceSets.main.output
    manifest {
        attributes(
                "Main-Class": "dev.prozilla.pine.tools.BuildTool"
        )
    }
}

repositories {
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
}

project.ext.lwjglVersion = "3.3.4"

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux" as GStringImpl
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}" as GStringImpl
                : "natives-windows-x86" as GStringImpl
        break
}

dependencies {
    // LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-stb"

    // LWJGL Natives
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    // Jackson Databind
    implementation "com.fasterxml.jackson.core:jackson-databind:2.18.1"

    // Gradle Tooling API
    implementation "org.gradle:gradle-tooling-api:8.8"
    runtimeOnly "org.slf4j:slf4j-simple:2.0.16"
}

tasks.register("runBuildTool", JavaExec) {
    mainClass = "dev.prozilla.pine.tools.BuildTool"
    classpath = sourceSets.main.runtimeClasspath
    args = []
}